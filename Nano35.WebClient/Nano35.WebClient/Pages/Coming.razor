@using Microsoft.AspNetCore.Authorization
@using Nano35.HttpContext.storage
@using Nano35.WebClient.Services
@attribute [Authorize]
@layout StorageLayout
@page "/instance/coming"
@inject IRequestManager RequestManager
@inject IComingsService ComingsService
@inject ISessionProvider SessionProvider


@if (_loading)
{
    <div class="col-md-6 offset-md-3 mt-5">
        <div class="card">
            <h4 class="card-header">Загрузка</h4>
            <div class="card-body">
                ...
            </div>
        </div>
    </div>
}
else
{
    <button class="btn btn-outline-primary"
            style="width: 100%"
            @onclick="ShowModalNewComing">
        Создать
    </button>
    <br/>
    <Grid Items="@_data" TItem="ComingViewModel">    
        <Header>  
            <th>Номер</th>
            <th>Дата</th>
            <th>Подразделение</th>
            <th>Клиент</th>
            <th>Цена</th>  
        </Header>  
        <Row Context="item">  
            <td>@item.Number</td>
            <td>@item.Date.ToString("dd.MM.yyyy")</td>
            <td>@item.Unit</td>
            <td>@item.Client</td>
            <td>@item.Cash</td>
        </Row>  
    </Grid>
    <Modal Title="Новое оприходование" 
           IsDisplay="@_isNewComingDisplay">
        <Form>
            <CreateComing/>
        </Form>
    </Modal>

}

@code
{
    private IEnumerable<ComingViewModel> _data;
    private bool _isNewComingDisplay = false;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        var isAvailable = await RequestManager.HealthCheck(RequestManager.StorageServer);
        _data = (await ComingsService.GetAllComings(await SessionProvider.GetCurrentInstanceId())).Data;
        _loading = false;
    }

    private void ShowModalNewComing() => _isNewComingDisplay = true;
    private void HideModalNewComing() => _isNewComingDisplay = false;
    
}
